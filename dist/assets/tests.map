{"version":3,"sources":["julipen/tests/adapters/application.jshint.js","julipen/tests/app.jshint.js","julipen/tests/helpers/destroy-app.js","julipen/tests/helpers/destroy-app.jshint.js","julipen/tests/helpers/module-for-acceptance.js","julipen/tests/helpers/module-for-acceptance.jshint.js","julipen/tests/helpers/resolver.js","julipen/tests/helpers/resolver.jshint.js","julipen/tests/helpers/start-app.js","julipen/tests/helpers/start-app.jshint.js","julipen/tests/login/route.jshint.js","julipen/tests/models/comment.jshint.js","julipen/tests/models/project.jshint.js","julipen/tests/models/shot.jshint.js","julipen/tests/models/user.jshint.js","julipen/tests/project/route.jshint.js","julipen/tests/router.jshint.js","julipen/tests/shot/route.jshint.js","julipen/tests/test-helper.js","julipen/tests/test-helper.jshint.js","julipen/tests/unit/adapters/application-test.js","julipen/tests/unit/adapters/application-test.jshint.js","julipen/tests/unit/login/route-test.js","julipen/tests/unit/login/route-test.jshint.js","julipen/tests/unit/models/comment-test.js","julipen/tests/unit/models/comment-test.jshint.js","julipen/tests/unit/models/project-test.js","julipen/tests/unit/models/project-test.jshint.js","julipen/tests/unit/models/shot-test.js","julipen/tests/unit/models/shot-test.jshint.js","julipen/tests/unit/models/user-test.js","julipen/tests/unit/models/user-test.jshint.js","julipen/tests/unit/project/route-test.js","julipen/tests/unit/project/route-test.jshint.js","julipen/tests/unit/shot/route-test.js","julipen/tests/unit/shot/route-test.jshint.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('julipen/tests/adapters/application.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - adapters');\n  QUnit.test('adapters/application.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'adapters/application.js should pass jshint.\\nadapters/application.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nadapters/application.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'app.js should pass jshint.\\napp.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 2, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 3, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 4, col 1, \\'import\\' is only available in ES6 (use esnext option).\\napp.js: line 6, col 1, \\'let\\' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).\\napp.js: line 13, col 3, \\'object short notation\\' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).\\napp.js: line 18, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n7 errors');\n  });\n});","define('julipen/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('julipen/tests/helpers/destroy-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/destroy-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass jshint.');\n  });\n});","define('julipen/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'julipen/tests/helpers/start-app', 'julipen/tests/helpers/destroy-app'], function (exports, _qunit, _julipenTestsHelpersStartApp, _julipenTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _julipenTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _julipenTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('julipen/tests/helpers/module-for-acceptance.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/module-for-acceptance.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass jshint.');\n  });\n});","define('julipen/tests/helpers/resolver', ['exports', 'ember/resolver', 'julipen/config/environment'], function (exports, _emberResolver, _julipenConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _julipenConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _julipenConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('julipen/tests/helpers/resolver.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/resolver.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass jshint.');\n  });\n});","define('julipen/tests/helpers/start-app', ['exports', 'ember', 'julipen/app', 'julipen/config/environment'], function (exports, _ember, _julipenApp, _julipenConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _julipenConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _julipenApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('julipen/tests/helpers/start-app.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - helpers');\n  QUnit.test('helpers/start-app.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass jshint.');\n  });\n});","define('julipen/tests/login/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - login');\n  QUnit.test('login/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'login/route.js should pass jshint.\\nlogin/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nlogin/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/models/comment.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/comment.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/comment.js should pass jshint.\\nmodels/comment.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/comment.js: line 20, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/models/project.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/project.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/project.js should pass jshint.\\nmodels/project.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/project.js: line 22, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/models/shot.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/shot.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/shot.js should pass jshint.\\nmodels/shot.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/shot.js: line 26, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/models/user.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - models');\n  QUnit.test('models/user.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/user.js should pass jshint.\\nmodels/user.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nmodels/user.js: line 24, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/project/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - project');\n  QUnit.test('project/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'project/route.js should pass jshint.\\nproject/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nproject/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/router.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('router.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'router.js should pass jshint.\\nrouter.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nrouter.js: line 2, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nrouter.js: line 4, col 1, \\'const\\' is available in ES6 (use esnext option) or Mozilla JS extensions (use moz).\\nrouter.js: line 14, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n4 errors');\n  });\n});","define('julipen/tests/shot/route.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - shot');\n  QUnit.test('shot/route.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'shot/route.js should pass jshint.\\nshot/route.js: line 1, col 1, \\'import\\' is only available in ES6 (use esnext option).\\nshot/route.js: line 3, col 1, \\'export\\' is only available in ES6 (use esnext option).\\n\\n2 errors');\n  });\n});","define('julipen/tests/test-helper', ['exports', 'julipen/tests/helpers/resolver', 'ember-qunit'], function (exports, _julipenTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_julipenTestsHelpersResolver['default']);\n});","define('julipen/tests/test-helper.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - .');\n  QUnit.test('test-helper.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/adapters/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('julipen/tests/unit/adapters/application-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/adapters');\n  QUnit.test('unit/adapters/application-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/login/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('julipen/tests/unit/login/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/login');\n  QUnit.test('unit/login/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/login/route-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/models/comment-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('comment', 'Unit | Model | comment', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('julipen/tests/unit/models/comment-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/comment-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/comment-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/models/project-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('project', 'Unit | Model | project', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('julipen/tests/unit/models/project-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/project-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/project-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/models/shot-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('shot', 'Unit | Model | shot', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('julipen/tests/unit/models/shot-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/shot-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/shot-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/models/user-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('julipen/tests/unit/models/user-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/models');\n  QUnit.test('unit/models/user-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/project/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:projects', 'Unit | Route | projects', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('julipen/tests/unit/project/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/project');\n  QUnit.test('unit/project/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/project/route-test.js should pass jshint.');\n  });\n});","define('julipen/tests/unit/shot/route-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:shot', 'Unit | Route | shot', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('julipen/tests/unit/shot/route-test.jshint', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('JSHint - unit/shot');\n  QUnit.test('unit/shot/route-test.js should pass jshint', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/shot/route-test.js should pass jshint.');\n  });\n});","/* jshint ignore:start */\n\nrequire('julipen/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}